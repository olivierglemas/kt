{"version":3,"sources":["webpack:///./src/app/showcase/app-shell/app-shell.module.ts","webpack:///./src/app/showcase/app-shell/app-shell.page.html","webpack:///./src/app/showcase/app-shell/app-shell.page.scss","webpack:///./src/app/showcase/app-shell/app-shell.page.ts","webpack:///./src/app/utils/shell-provider.ts"],"names":[],"mappings":"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","file":"app-shell-app-shell-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ComponentsModule } from '../../components/components.module';\n\nimport { AppShellPage } from './app-shell.page';\nimport { ShowcaseService } from '../showcase.service';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AppShellPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    ComponentsModule,\n    HttpClientModule\n  ],\n  declarations: [\n    AppShellPage\n  ],\n  providers: [\n    ShowcaseService\n  ]\n})\nexport class AppShellModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>\\n      App Shell Components\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"showcase-content\\\">\\n  <ion-item-divider sticky=\\\"true\\\">\\n    <ion-label>Aspect Ratio</ion-label>\\n  </ion-item-divider>\\n  <section class=\\\"showcase-section\\\">\\n    <p>\\n      The <code>&lt;app-aspect-ratio&gt;</code> is a simple component that ensures a block will maintain the specified aspect ratio.\\n    </p>\\n    <p>\\n      It uses an <a href=\\\"http://stackoverflow.com/a/10441480/1116959\\\" target=\\\"_blank\\\">old CSS technique</a> to adjust the height of the element based on its width (using padding-bottom).\\n    </p>\\n    <p>\\n      This is a very handy component to prevent content from jumping around while the page is loading.\\n    </p>\\n    <p>\\n      <b>Note:</b> The <code>&lt;app-aspect-ratio&gt;</code> component must be surrounded by a container element with a defined width, as this component will fill the parent width.\\n    </p>\\n<pre>\\n<b>&lt;div style=\\\"width:80%; margin: 0px auto;\\\"&gt;</b>\\n  &lt;app-aspect-ratio [ratio]=\\\"&#123;w:2, h:1&#125;\\\"&gt;\\n    &lt;span&gt;This container will always have a 2:1 aspect ratio&lt;/span&gt;\\n  &lt;/app-aspect-ratio&gt;\\n<b>&lt;/div&gt;</b>\\n</pre>\\n    <div style=\\\"width:80%; margin: 0px auto;\\\">\\n      <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\" style=\\\"background-color: #00AFFF;\\\">\\n        <span style=\\\"margin: 10px; display: block;\\\">This container will always have a <b>2:1</b> aspect ratio</span>\\n      </app-aspect-ratio>\\n    </div>\\n  </section>\\n\\n  <ion-item-divider sticky=\\\"true\\\">\\n    <ion-label>Image Shell</ion-label>\\n  </ion-item-divider>\\n  <section class=\\\"showcase-section\\\">\\n    <p>\\n      This component enables to preload an image with an elegant shell.\\n    </p>\\n  </section>\\n  <section class=\\\"showcase-section\\\">\\n    <h5>Set different animation options</h5>\\n    <p>\\n      You can choose between <b>no animation</b> (default), <b>spinner animation</b>, and <b>gradient background</b> animation\\n    </p>\\n    <h4>No animation (default)</h4>\\n<pre>\\n&lt;app-image-shell [src]=\\\"\\\" [alt]=\\\"\\\"&gt;&lt;/app-image-shell&gt;\\n</pre>\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\n        <app-image-shell [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\n      </app-aspect-ratio>\\n    </div>\\n    <h4>Spinner animation</h4>\\n<pre>\\n&lt;app-image-shell <b>animation=\\\"spinner\\\"</b> [src]=\\\"\\\" [alt]=\\\"\\\"&gt;&lt;/app-image-shell&gt;\\n</pre>\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\n        <app-image-shell animation=\\\"spinner\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\n      </app-aspect-ratio>\\n    </div>\\n    <h4>Gradient animation</h4>\\n<pre>\\n&lt;app-image-shell <b>animation=\\\"gradient\\\"</b> [src]=\\\"\\\" [alt]=\\\"\\\"&gt;&lt;/app-image-shell&gt;\\n</pre>\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\n        <app-image-shell animation=\\\"gradient\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\n      </app-aspect-ratio>\\n    </div>\\n  </section>\\n  <section class=\\\"showcase-section\\\">\\n    <p>\\n      You can add/remove the following <b>Classes</b> to adjust the shell element behavior:\\n    </p>\\n    <h5>Overlay</h5>\\n    <p>\\n      This class adds a background overlay after the image has loaded.\\n    </p>\\n<pre>\\n&lt;app-image-shell animation=\\\"spinner\\\" <b>class=\\\"add-overlay\\\"</b> [src]=\\\"''./assets/sample-images/travel/Travel2-64.47.png''\\\" [alt]=\\\"\\\"&gt;&lt;/app-image-shell&gt;\\n</pre>\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\n        <app-image-shell animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [src]=\\\"'./assets/sample-images/travel/Travel2-64.47.png'\\\" [alt]=\\\"\\\"></app-image-shell>\\n      </app-aspect-ratio>\\n    </div>\\n  </section>\\n  <section class=\\\"showcase-section\\\">\\n    <p>\\n      You can also override these <b>CSS 4 variables</b> to adjust the shell element style\\n    </p>\\n    <h5>Background</h5>\\n<pre>\\napp-image-shell &#123;\\n  --image-shell-loading-background: rgba(233, 30, 99, .25);\\n&#125;\\n</pre>\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\n        <app-image-shell style=\\\"--image-shell-loading-background: rgba(233, 30, 99, .25);\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\n      </app-aspect-ratio>\\n    </div>\\n    <h5>Overlay</h5>\\n<pre>\\napp-image-shell &#123;\\n  --image-shell-overlay-background: rgba(103, 58, 183, .40);\\n&#125;\\n</pre>\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\n        <app-image-shell style=\\\"--image-shell-overlay-background: rgba(103, 58, 183, .40);\\\" animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [src]=\\\"'./assets/sample-images/travel/Travel2-64.47.png'\\\" [alt]=\\\"\\\"></app-image-shell>\\n      </app-aspect-ratio>\\n    </div>\\n    <h5>Spinner</h5>\\n<pre>\\napp-image-shell &#123;\\n  --image-shell-spinner-size: 40px;\\n  --image-shell-spinner-color: #000000;\\n&#125;\\n</pre>\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\n        <app-image-shell style=\\\"--image-shell-spinner-size: 40px; --image-shell-spinner-color: #000000;\\\" animation=\\\"spinner\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\n      </app-aspect-ratio>\\n    </div>\\n    <h5>Background Animation</h5>\\n    <p>\\n      <b>Note:</b> These properties are only applied when using <code>animation=\\\"gradient\\\"</code>.\\n    </p>\\n<pre>\\napp-image-shell &#123;\\n  --image-shell-loading-background: rgba(255, 3, 109, 0.6);\\n  --image-shell-animation-color: rgba(156, 4, 68, 0.7);\\n&#125;\\n</pre>\\n    <div style=\\\"width:30%; margin: 0px auto;\\\">\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\n        <app-image-shell style=\\\"\\n          --image-shell-loading-background: rgba(255, 3, 109, 0.6);\\n          --image-shell-animation-color: rgba(156, 4, 68, 0.7);\\n        \\\" animation=\\\"gradient\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\n      </app-aspect-ratio>\\n    </div>\\n    <h5>Border Radius</h5>\\n<pre>\\napp-image-shell &#123;\\n  --image-shell-border-radius: 10px;\\n&#125;\\n</pre>\\n    <ion-row>\\n      <ion-col>\\n        <div style=\\\"width:80%; margin: 0px auto;\\\">\\n          <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\n            <app-image-shell style=\\\"--image-shell-border-radius: 10px;\\\" animation=\\\"spinner\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\n          </app-aspect-ratio>\\n        </div>\\n      </ion-col>\\n      <ion-col>\\n        <div style=\\\"width:80%; margin: 0px auto;\\\">\\n          <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\n            <app-image-shell style=\\\"--image-shell-border-radius: 10px;\\\" animation=\\\"gradient\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\n          </app-aspect-ratio>\\n        </div>\\n      </ion-col>\\n    </ion-row>\\n  </section>\\n  <section class=\\\"showcase-section\\\">\\n    <h2>Cover Image mode</h2>\\n    <p>\\n      In addition to the default <code>&lt;app-image-shell&gt;</code>, you can specify a <b>cover</b> mode if you want to display your image as a background-image.\\n    </p>\\n    <p>\\n      This is different from the default mode, because (although it's not mandatory) cover mode is designed to contain content (for example some text)\\n    </p>\\n<pre>\\n<b>&lt;app-image-shell [mode]=\\\"'cover'\\\" animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [src]=\\\"\\\"&gt;</b>\\n  &lt;app-aspect-ratio [ratio]=\\\"&#123;w:3, h:2&#125;\\\"&gt;\\n    Some Text\\n  &lt;/app-aspect-ratio&gt;\\n<b>&lt;/app-image-shell&gt;</b>\\n</pre>\\n    <app-image-shell class=\\\"add-overlay\\\" animation=\\\"spinner\\\" [mode]=\\\"'cover'\\\" [src]=\\\"\\\">\\n      <app-aspect-ratio [ratio]=\\\"{w:3, h:2}\\\">\\n        <h4 style=\\\"margin: 10px;\\\">Some Text on top of a background-image container</h4>\\n      </app-aspect-ratio>\\n    </app-image-shell>\\n  </section>\\n  <section class=\\\"showcase-section\\\">\\n    <h2>Usage</h2>\\n    <p>\\n      Let me explain you the differences between <b>default</b> and <b>cover</b> mode and when you should use each one.\\n    </p>\\n    <h5>Default Mode Usage</h5>\\n    <p>\\n      You should use the <b>default mode</b> when you are 100% confident on the aspect ratio of an image.\\n    </p>\\n    <p>\\n      If the image ratio does not match the specified aspect ratio, the image will be stretched.\\n    </p>\\n    <p>\\n      <b>Expected behavior:</b>\\n      <br />\\n      The image <b>WILL</b> be stretched.\\n      <br />\\n      We define an aspect ratio of <b>2:1</b> but the image has an aspect ratio of <b>1:1</b>.\\n    </p>\\n    <div style=\\\"width:80%; margin: 0px auto;\\\">\\n      <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\n        <app-image-shell animation=\\\"spinner\\\" [src]=\\\"'https://lorempixel.com/200/200/people/1/'\\\" [alt]=\\\"\\\"></app-image-shell>\\n      </app-aspect-ratio>\\n    </div>\\n    <p>\\n      <b>Expected behavior:</b>\\n      <br />\\n      The image <b>WON'T</b> be stretched.\\n      <br />\\n      We define an aspect ratio of <b>1:1</b> that matches the image ratio of <b>1:1</b>.\\n    </p>\\n    <div style=\\\"width:80%; margin: 0px auto;\\\">\\n      <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\n        <app-image-shell animation=\\\"spinner\\\" [src]=\\\"'https://lorempixel.com/200/200/people/1/'\\\" [alt]=\\\"\\\"></app-image-shell>\\n      </app-aspect-ratio>\\n    </div>\\n    <h5>Cover Mode Usage</h5>\\n    <p>\\n      You should use the <b>cover mode</b> when you want to fill a container with an image and you don't care if the image is shown completly or a portion of it.\\n    </p>\\n    <p>\\n      If the image ratio does not match the specified aspect ratio, the image will be cropped to fit the available space without stretching the image.\\n    </p>\\n    <p>\\n      <b>Expected behavior:</b>\\n      <br />\\n      The image will be cropped to fill the available space.\\n      <br />\\n      We define an aspect ratio of <b>2:1</b> but the image has an aspect ratio of <b>1:1</b>.\\n    </p>\\n    <div style=\\\"width:80%; margin: 0px auto;\\\">\\n      <app-image-shell animation=\\\"spinner\\\" [mode]=\\\"'cover'\\\" [src]=\\\"'https://lorempixel.com/200/200/people/1/'\\\">\\n        <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\n        </app-aspect-ratio>\\n      </app-image-shell>\\n    </div>\\n    <p>\\n      You can also change the <b>background-position</b> property to adjust how the image is placed inside the container.\\n    </p>\\n    <p>\\n      <b>Notice:</b> This only applies to <b>cover</b> mode.\\n    </p>\\n<pre>\\napp-image-shell[mode=\\\"cover\\\"] &#123;\\n  background-position: bottom right;\\n&#125;\\n</pre>\\n    <div style=\\\"width:80%; margin: 0px auto;\\\">\\n      <app-image-shell style=\\\"background-position: bottom right;\\\" animation=\\\"spinner\\\" [mode]=\\\"'cover'\\\" [src]=\\\"'https://lorempixel.com/200/200/people/1/'\\\">\\n        <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\n        </app-aspect-ratio>\\n      </app-image-shell>\\n    </div>\\n  </section>\\n  <section class=\\\"showcase-section\\\">\\n    <h2>Maintain Aspect Ratio</h2>\\n    <p>\\n      We use the handy <code>&lt;app-aspect-ratio&gt;</code> to ensure the image shell mantains a specified aspect ratio.\\n    </p>\\n    <p>\\n      By doing so, we prevent content from jumping around the page while assets (images) are loading.\\n    </p>\\n    <h5>Default mode</h5>\\n    <p>\\n      Just surround the <code>&lt;app-image-shell&gt;</code> with an <code>&lt;app-aspect-ratio&gt;</code> element\\n    </p>\\n<pre>\\n<b>&lt;app-aspect-ratio [ratio]=\\\"&#123;w:3, h:2&#125;\\\"&gt;</b>\\n  &lt;app-image-shell animation=\\\"spinner\\\" [src]=\\\"\\\" [alt]=\\\"\\\"&gt;&lt;/app-image-shell&gt;\\n<b>&lt;/app-aspect-ratio&gt;</b>\\n</pre>\\n    <div style=\\\"width:60%; margin: 0px auto;\\\">\\n      <app-aspect-ratio [ratio]=\\\"{w:3, h:2}\\\">\\n        <app-image-shell animation=\\\"spinner\\\" [src]=\\\"\\\" [alt]=\\\"\\\"></app-image-shell>\\n      </app-aspect-ratio>\\n    </div>\\n    <h5>Cover mode</h5>\\n    <p>\\n      When using the <b>cover</b> mode we need to include the <code>&lt;app-aspect-ratio&gt;</code> inside the <code>&lt;app-image-shell&gt;</code> element instead of surrounding it.\\n    </p>\\n<pre>\\n&lt;app-image-shell [mode]=\\\"'cover'\\\" animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [src]=\\\"\\\"&gt;\\n  <b>&lt;app-aspect-ratio [ratio]=\\\"&#123;w:3, h:2&#125;\\\"&gt;</b>\\n    Some Text\\n  <b>&lt;/app-aspect-ratio&gt;</b>\\n&lt;/app-image-shell&gt;\\n</pre>\\n    <app-image-shell animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [mode]=\\\"'cover'\\\" [src]=\\\"\\\">\\n      <app-aspect-ratio [ratio]=\\\"{w:3, h:2}\\\">\\n        <h4 style=\\\"margin: 10px;\\\">Some Text on top of a background-image container</h4>\\n      </app-aspect-ratio>\\n    </app-image-shell>\\n  </section>\\n\\n  <ion-item-divider sticky=\\\"true\\\">\\n    <ion-label>Text Shell</ion-label>\\n  </ion-item-divider>\\n  <section class=\\\"showcase-section\\\">\\n    <p>\\n      This component is useful when you want to show a loading indicator while fetching text data from the server.\\n    </p>\\n    <p>\\n      The <code>&lt;app-text-shell&gt;</code> basically works by wrapping the text node with a loading indicator while you are fetching data.\\n    </p>\\n    <p>\\n      While there are empty values the component adds some 'loading' styles and animations. Whereas while there are non empty values, the loading state is removed.\\n    </p>\\n    <p>\\n      Try toggling the loading state of the text shells below by changing the value of this textarea.\\n    </p>\\n    <ion-textarea style=\\\"--background: #EEE;\\\" placeholder=\\\"When this text is empty the text-shell will show the loading state.\\\" clearOnEdit=\\\"true\\\" [(ngModel)]=\\\"sampleTextShellData\\\"></ion-textarea>\\n    <p>\\n      You can reset the 'loading' state by clearing the textarea value.\\n    </p>\\n  </section>\\n  <section class=\\\"showcase-section\\\">\\n    <h4>No animation (default)</h4>\\n    <p>\\n      Single line example\\n    </p>\\n    <div style=\\\"background-color: #FFF; padding: 20px;\\\">\\n      <app-text-shell [data]=\\\"sampleTextShellData\\\"></app-text-shell>\\n    </div>\\n    <p>\\n      Multi-line example\\n    </p>\\n    <div style=\\\"background-color: #FFF; padding: 20px;\\\">\\n      <p>\\n        <app-text-shell [data]=\\\"sampleTextShellData\\\" lines=\\\"3\\\"></app-text-shell>\\n      </p>\\n    </div>\\n    <p>\\n      On top of another element (with transparent background)\\n    </p>\\n    <div style=\\\"background-color: #FFF; padding: 20px; color: #FFF; font-weight: 500;\\\">\\n      <app-image-shell animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [mode]=\\\"'cover'\\\" [src]=\\\"'https://lorempixel.com/400/200/abstract/1/'\\\">\\n        <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\n          <p style=\\\"margin: 20px 40px;\\\">\\n            <app-text-shell [data]=\\\"sampleTextShellData\\\" lines=\\\"3\\\"></app-text-shell>\\n          </p>\\n        </app-aspect-ratio>\\n      </app-image-shell>\\n    </div>\\n  </section>\\n  <section class=\\\"showcase-section\\\">\\n    <h4>Bouncing animation</h4>\\n    <p>\\n      Single line example\\n    </p>\\n    <div style=\\\"background-color: #FFF; padding: 20px;\\\">\\n      <app-text-shell [data]=\\\"sampleTextShellData\\\" animation=\\\"bouncing\\\"></app-text-shell>\\n    </div>\\n    <p>\\n      Multi-line example\\n    </p>\\n    <div style=\\\"background-color: #FFF; padding: 20px;\\\">\\n      <p>\\n        <app-text-shell [data]=\\\"sampleTextShellData\\\" animation=\\\"bouncing\\\" lines=\\\"3\\\"></app-text-shell>\\n      </p>\\n    </div>\\n    <p>\\n      On top of another element (with transparent background)\\n    </p>\\n    <div style=\\\"background-color: #FFF; padding: 20px; color: #FFF; font-weight: 500;\\\">\\n      <app-image-shell animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [mode]=\\\"'cover'\\\" [src]=\\\"'https://lorempixel.com/400/200/nature/1/'\\\">\\n        <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\n          <p style=\\\"margin: 20px 40px;\\\">\\n            <app-text-shell [data]=\\\"sampleTextShellData\\\" animation=\\\"bouncing\\\" lines=\\\"3\\\"></app-text-shell>\\n          </p>\\n        </app-aspect-ratio>\\n      </app-image-shell>\\n    </div>\\n  </section>\\n  <section class=\\\"showcase-section\\\">\\n    <h4>Gradient animation</h4>\\n    <p>\\n      Single line example\\n    </p>\\n    <div style=\\\"background-color: #FFF; padding: 20px;\\\">\\n      <app-text-shell [data]=\\\"sampleTextShellData\\\" animation=\\\"gradient\\\"></app-text-shell>\\n    </div>\\n    <p>\\n      Multi-line example\\n    </p>\\n    <div style=\\\"background-color: #FFF; padding: 20px;\\\">\\n      <p>\\n        <app-text-shell [data]=\\\"sampleTextShellData\\\" animation=\\\"gradient\\\" lines=\\\"3\\\"></app-text-shell>\\n      </p>\\n    </div>\\n    <p>\\n      On top of another element (with transparent background)\\n    </p>\\n    <div style=\\\"background-color: #FFF; padding: 20px; color: #FFF; font-weight: 500;\\\">\\n      <app-image-shell animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [mode]=\\\"'cover'\\\" [src]=\\\"'https://lorempixel.com/400/200/city/1/'\\\">\\n        <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\n          <p style=\\\"margin: 20px 40px;\\\">\\n            <app-text-shell [data]=\\\"sampleTextShellData\\\" animation=\\\"gradient\\\" lines=\\\"3\\\"></app-text-shell>\\n          </p>\\n        </app-aspect-ratio>\\n      </app-image-shell>\\n    </div>\\n  </section>\\n  <section class=\\\"showcase-section\\\">\\n    <h4>Other use cases</h4>\\n    <p>\\n      The <code>&lt;app-text-shell&gt;</code> element can be used alone or wrapped with a text tag (<b>h1</b>, <b>h2</b>, <b>h3</b>, <b>p</b>, etc).\\n    </p>\\n    <p>\\n      In case you wrap it with a heading element, we included basic styles (<code>src/theme/shell-defaults.scss</code>) to match the different heading styles (mainly line-height associated to each heading).\\n    </p>\\n<pre>\\n:root &#123;\\n  h1 > app-text-shell &#123;\\n    --text-shell-line-height: 32px;\\n    --text-shell-line-color: #CCC;\\n  &#125;\\n&#125;\\n</pre>\\n    <p>\\n      By matching the line-height of the text-shell with the line-height of the wrapper element, we avoid page height bumps after the data gets loaded into the shells.\\n    </p>\\n<pre>\\n&lt;h1&gt;\\n  &lt;app-text-shell [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\n&lt;/h1&gt;\\n\\n&lt;h2&gt;\\n  &lt;app-text-shell [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\n&lt;/h2&gt;\\n\\n&lt;h3&gt;\\n  &lt;app-text-shell [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\n&lt;/h3&gt;\\n\\n&lt;h4&gt;\\n  &lt;app-text-shell [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\n&lt;/h4&gt;\\n\\n&lt;h5&gt;\\n  &lt;app-text-shell [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\n&lt;/h5&gt;\\n</pre>\\n    <h1>\\n      <app-text-shell [data]=\\\"\\\"></app-text-shell>\\n    </h1>\\n    <h2>\\n      <app-text-shell [data]=\\\"\\\"></app-text-shell>\\n    </h2>\\n    <h3>\\n      <app-text-shell [data]=\\\"\\\"></app-text-shell>\\n    </h3>\\n    <h4>\\n      <app-text-shell [data]=\\\"\\\"></app-text-shell>\\n    </h4>\\n    <h5>\\n      <app-text-shell [data]=\\\"\\\"></app-text-shell>\\n    </h5>\\n  </section>\\n  <section class=\\\"showcase-section\\\">\\n    <p>\\n      You can add/remove the following <b>Attributes</b> to adjust the shell element behavior\\n    </p>\\n    <h5>Multi-line support</h5>\\n    <p>\\n      You can set up-to 6 lines\\n    </p>\\n<pre>\\n&lt;p&gt;\\n  &lt;app-text-shell <b>lines=\\\"6\\\"</b> [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\n&lt;/p&gt;\\n</pre>\\n    <p>\\n      <app-text-shell style=\\\"--text-shell-line-color: #DDD;\\\" [data]=\\\"\\\" lines=\\\"6\\\"></app-text-shell>\\n    </p>\\n    <h5>Set different animation options</h5>\\n    <p>\\n      You can choose between <b>no animation</b> (default), <b>bouncing animation</b>, and <b>gradient background with line masks on top</b>\\n    </p>\\n<pre>\\n&lt;p&gt;\\n  &lt;app-text-shell <b>animation=\\\"bouncing\\\"</b> lines=\\\"2\\\" [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\n&lt;/p&gt;\\n</pre>\\n    <p>\\n      <app-text-shell style=\\\"--text-shell-line-color: #DDD;\\\" [data]=\\\"\\\" animation=\\\"bouncing\\\" lines=\\\"2\\\"></app-text-shell>\\n    </p>\\n<pre>\\n&lt;p&gt;\\n  &lt;app-text-shell <b>animation=\\\"gradient\\\"</b> lines=\\\"2\\\" [data]=\\\"\\\"&gt;&lt;/app-text-shell&gt;\\n&lt;/p&gt;\\n</pre>\\n<pre>\\napp-text-shell &#123;\\n  --text-shell-background: #FFF;\\n  --text-shell-line-color: transparent;\\n&#125;\\n</pre>\\n    <p style=\\\"padding: 5px; background: #FFF;\\\">\\n      <app-text-shell style=\\\"--text-shell-line-color: transparent; --text-shell-background: #FFF;\\\" [data]=\\\"\\\" animation=\\\"gradient\\\" lines=\\\"2\\\"></app-text-shell>\\n    </p>\\n    <p>\\n      In this mode, the <code>--text-shell-background</code> property refers to the masks colors.\\n    </p>\\n    <p>\\n      <b>Note:</b> When using a <code>gradient</code> animation, make sure you set the line-color to transparent so the background animation that's beneath the masks can be seen.\\n    </p>\\n  </section>\\n  <section class=\\\"showcase-section\\\">\\n    <p>\\n      You can also override these <b>CSS 4 variables</b> to adjust the shell element style\\n    </p>\\n    <h5>Line color</h5>\\n<pre>\\napp-text-shell &#123;\\n  --text-shell-line-color: rgba(233, 30, 99, .25);\\n&#125;\\n</pre>\\n    <h3>\\n      <app-text-shell style=\\\"--text-shell-line-color: rgba(233, 30, 99, .25);\\\" [data]=\\\"\\\"></app-text-shell>\\n    </h3>\\n    <h5>Background</h5>\\n    <p>\\n      Background by default is set to <b>transparent</b>.\\n    </p>\\n<pre>\\napp-text-shell &#123;\\n  --text-shell-line-color: #FFFFFF;\\n  --text-shell-background: #000000;\\n&#125;\\n</pre>\\n    <p style=\\\"padding: 5px; background: #000000;\\\">\\n      <app-text-shell style=\\\"--text-shell-line-color: #FFFFFF; --text-shell-background: #000000;\\\" [data]=\\\"\\\" lines=\\\"3\\\"></app-text-shell>\\n    </p>\\n    <h5>Background Animation</h5>\\n    <p>\\n      <b>Note:</b> These properties are only applied when using <code>animation=\\\"gradient\\\"</code>.\\n    </p>\\n<pre>\\napp-text-shell &#123;\\n  --text-shell-line-color: transparent;\\n  --text-shell-background: #000000;\\n  --text-shell-animation-background: rgba(255, 3, 109, 0.6);\\n  --text-shell-animation-color: rgba(156, 4, 68, 0.7);\\n&#125;\\n</pre>\\n    <p style=\\\"padding: 5px; background: #000000;\\\">\\n      <app-text-shell style=\\\"\\n        --text-shell-line-color: transparent;\\n        --text-shell-background: #000000;\\n        --text-shell-animation-background: rgba(255, 3, 109, 0.6);\\n        --text-shell-animation-color: rgba(156, 4, 68, 0.7);\\n      \\\" [data]=\\\"\\\" lines=\\\"3\\\" animation=\\\"gradient\\\"></app-text-shell>\\n    </p>\\n    <h5>Line height</h5>\\n<pre>\\napp-text-shell &#123;\\n  --text-shell-line-height: 40px;\\n&#125;\\n</pre>\\n    <h3>\\n      <app-text-shell style=\\\"--text-shell-line-height: 40px;\\\" [data]=\\\"\\\"></app-text-shell>\\n    </h3>\\n    <h5>Line gutter</h5>\\n<pre>\\napp-text-shell &#123;\\n  --text-shell-line-gutter: 10px;\\n&#125;\\n</pre>\\n    <p>\\n      <app-text-shell style=\\\"--text-shell-line-gutter: 10px; --text-shell-line-color: #CCC;\\\" [data]=\\\"\\\" lines=\\\"4\\\"></app-text-shell>\\n    </p>\\n  </section>\\n\\n  <ion-item-divider sticky=\\\"true\\\">\\n    <ion-label>Binding Data to Shell Elements</ion-label>\\n  </ion-item-divider>\\n  <section class=\\\"showcase-section\\\">\\n    <p>\\n      You can combine the different shell elements in multiple ways to fit your needs\\n    </p>\\n    <ion-row style=\\\"background-color: #FFF; padding: 10px; margin: 20px;\\\">\\n      <ion-col size=\\\"12\\\">\\n        <app-image-shell animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [mode]=\\\"'cover'\\\" [src]=\\\"\\\">\\n          <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\n            <h4 style=\\\"margin: 10px; text-align: center;\\\">Text on top of a background-image container</h4>\\n          </app-aspect-ratio>\\n        </app-image-shell>\\n      </ion-col>\\n      <ion-col size=\\\"4\\\">\\n        <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\n          <app-image-shell animation=\\\"spinner\\\" [src]=\\\"\\\" [alt]=\\\"'Sample Image'\\\"></app-image-shell>\\n        </app-aspect-ratio>\\n      </ion-col>\\n      <ion-col size=\\\"8\\\">\\n        <h3 style=\\\"margin-top: 0px;\\\">\\n          <app-text-shell [data]=\\\"\\\"></app-text-shell>\\n        </h3>\\n        <p>\\n          <app-text-shell [data]=\\\"\\\" lines=\\\"3\\\"></app-text-shell>\\n        </p>\\n      </ion-col>\\n    </ion-row>\\n  </section>\\n  <section class=\\\"showcase-section\\\">\\n    <h5>Fetch data with the HttpClient</h5>\\n    <p>\\n      Let's set a timeout and fetch data using the <code>HttpClient</code>\\n    </p>\\n    <p>\\n      Data coming in <b>{{ simpleFetchCountdown }} seconds</b>\\n    </p>\\n    <ion-row style=\\\"background-color: #FFF; padding: 10px; margin: 20px;\\\">\\n      <ion-col size=\\\"12\\\">\\n        <app-image-shell animation=\\\"gradient\\\" class=\\\"add-overlay\\\" [mode]=\\\"'cover'\\\" [src]=\\\"simpleFetchData?.cover\\\" [alt]=\\\"'Sample Image Cover'\\\">\\n          <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\n            <h4 style=\\\"margin: 10px; text-align: center; color: #FFF;\\\">Heading on top of a cover image</h4>\\n          </app-aspect-ratio>\\n        </app-image-shell>\\n      </ion-col>\\n      <ion-col size=\\\"4\\\">\\n        <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\n          <app-image-shell animation=\\\"gradient\\\" [src]=\\\"simpleFetchData?.image\\\" [alt]=\\\"'Sample Image'\\\"></app-image-shell>\\n        </app-aspect-ratio>\\n      </ion-col>\\n      <ion-col size=\\\"8\\\">\\n        <h3 style=\\\"margin-top: 0px;\\\">\\n          <app-text-shell animation=\\\"gradient\\\" [data]=\\\"simpleFetchData?.title\\\"></app-text-shell>\\n        </h3>\\n        <p>\\n          <app-text-shell animation=\\\"gradient\\\" [data]=\\\"simpleFetchData?.description\\\" lines=\\\"3\\\"></app-text-shell>\\n        </p>\\n      </ion-col>\\n    </ion-row>\\n    <ion-button (click)=\\\"showcaseShellSimpleFetch(3)\\\" [disabled]=\\\"simpleFetchButtonDisabled\\\">Fetch more Data</ion-button>\\n  </section>\\n  <section class=\\\"showcase-section\\\">\\n    <h5>Fetch data using ShellProvider</h5>\\n    <p>\\n      Using the <code>ShellProvider</code> utility you can reduce the amount of boilerplate from the previous example and achieve the same behavior.\\n    </p>\\n    <ion-row style=\\\"background-color: #FFF; padding: 10px; margin: 20px;\\\">\\n      <ion-col size=\\\"12\\\">\\n        <app-image-shell animation=\\\"spinner\\\" class=\\\"add-overlay\\\" [mode]=\\\"'cover'\\\" [src]=\\\"(shellProviderData | async)?.cover\\\" [alt]=\\\"'Sample Image Cover'\\\">\\n          <app-aspect-ratio [ratio]=\\\"{w:2, h:1}\\\">\\n            <h4 style=\\\"margin: 10px; text-align: center; color: #FFF;\\\">Heading on top of a cover image</h4>\\n          </app-aspect-ratio>\\n        </app-image-shell>\\n      </ion-col>\\n      <ion-col size=\\\"4\\\">\\n        <app-aspect-ratio [ratio]=\\\"{w:1, h:1}\\\">\\n          <app-image-shell animation=\\\"spinner\\\" [src]=\\\"(shellProviderData | async)?.image\\\" [alt]=\\\"'Sample Image'\\\"></app-image-shell>\\n        </app-aspect-ratio>\\n      </ion-col>\\n      <ion-col size=\\\"8\\\">\\n        <h3 style=\\\"margin-top: 0px;\\\">\\n          <app-text-shell [data]=\\\"(shellProviderData | async)?.title\\\"></app-text-shell>\\n        </h3>\\n        <p>\\n          <app-text-shell [data]=\\\"(shellProviderData | async)?.description\\\" lines=\\\"3\\\"></app-text-shell>\\n        </p>\\n      </ion-col>\\n    </ion-row>\\n    <ion-button (click)=\\\"showcaseShellProvider()\\\" [disabled]=\\\"shellProviderButtonDisabled\\\">Fetch more Data</ion-button>\\n  </section>\\n</ion-content>\\n\"","module.exports = \".showcase-content {\\n  --background: var(--app-background); }\\n  .showcase-content ion-item-divider {\\n    --background: var(--ion-color-secondary);\\n    --color: var(--ion-color-lightest);\\n    text-transform: uppercase;\\n    font-weight: 500;\\n    letter-spacing: 1px; }\\n  .showcase-content .showcase-section {\\n    margin: 20px 20px 100px; }\\n  .showcase-content pre {\\n    font-size: 14px;\\n    background: #CCC;\\n    padding: 10px; }\\n  .showcase-content code {\\n    color: #F92672;\\n    font-weight: 500; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9vbGl2aWVyZ2xlbWFzL0RvY3VtZW50cy9ndWlkZUFPVFcvaW9uaWM0LWZ1bGwtc3RhcnRlci1hcHAtMS4yL3NyYy9hcHAvc2hvd2Nhc2UvYXBwLXNoZWxsL2FwcC1zaGVsbC5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxtQ0FBYSxFQUFBO0VBRGY7SUFJSSx3Q0FBYTtJQUNiLGtDQUFRO0lBQ1IseUJBQXlCO0lBQ3pCLGdCQUFnQjtJQUNoQixtQkFBbUIsRUFBQTtFQVJ2QjtJQVlJLHVCQUF1QixFQUFBO0VBWjNCO0lBZ0JJLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsYUFBYSxFQUFBO0VBbEJqQjtJQXNCSSxjQUFjO0lBQ2QsZ0JBQWdCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9zaG93Y2FzZS9hcHAtc2hlbGwvYXBwLXNoZWxsLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zaG93Y2FzZS1jb250ZW50IHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1hcHAtYmFja2dyb3VuZCk7XG5cbiAgaW9uLWl0ZW0tZGl2aWRlciB7XG4gICAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tY29sb3Itc2Vjb25kYXJ5KTtcbiAgICAtLWNvbG9yOiB2YXIoLS1pb24tY29sb3ItbGlnaHRlc3QpO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICB9XG5cbiAgLnNob3djYXNlLXNlY3Rpb24ge1xuICAgIG1hcmdpbjogMjBweCAyMHB4IDEwMHB4O1xuICB9XG5cbiAgcHJlIHtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgYmFja2dyb3VuZDogI0NDQztcbiAgICBwYWRkaW5nOiAxMHB4O1xuICB9XG5cbiAgY29kZSB7XG4gICAgY29sb3I6ICNGOTI2NzI7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgfVxufVxuIl19 */\"","import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable, timer, interval } from 'rxjs';\nimport { takeUntil, finalize, take } from 'rxjs/operators';\n\nimport { ShellProvider } from '../../utils/shell-provider';\n\n// You can use a plain interface as a shell model\n// interface IShell {\n//   cover: string;\n//   image: string;\n//   title: string;\n//   description: string;\n// }\n\n// You can also use a Class object as a shell model\n// import { ShowcaseShellModel } from '../showcase-shell.model';\n\n@Component({\n  selector: 'app-showcase-shell',\n  templateUrl: './app-shell.page.html',\n  styleUrls: ['./app-shell.page.scss']\n})\nexport class AppShellPage implements OnInit {\n  sampleTextShellData = '';\n\n  // We will manually fetch data using the HttpClient and assign it to this property\n  simpleFetchData: {\n    cover: string,\n    image: string,\n    title: string,\n    description: string\n  };\n  // You can also define the type of the property using the IShell interface or the ShowcaseShellModel class\n  // simpleFetchData: IShell;\n  // simpleFetchData: ShowcaseShellModel;\n\n  // Fetch data with the ShellProvider utility and assign it to this property\n  // ShellProvider data is async (Observable)\n  shellProviderData: Observable<{\n    cover: string,\n    image: string,\n    title: string,\n    description: string\n  }>;\n  // You can also define the type of the property using the IShell interface or the ShowcaseShellModel class\n  // shellProviderData: Observable<IShell>;\n  // shellProviderData: Observable<ShowcaseShellModel>;\n\n  // Aux properties for the Simple Fetch (HttpClient) showcase\n  simpleFetchButtonDisabled = true;\n  simpleFetchCountdown = 0;\n  simpleFetchInterval: Observable<any>;\n\n  // Aux properties for the ShellProvider showcase\n  shellProviderButtonDisabled = true;\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit(): void {\n    this.showcaseShellSimpleFetch(10);\n    this.showcaseShellProvider();\n  }\n\n  showcaseShellSimpleFetch(countdown: number): void {\n    // Assign an (empty / null) value to the shell object to restore it's 'loading' state\n    this.simpleFetchData = null;\n\n    // Prevent rage clicks on the 'Fetch more Data' button\n    this.simpleFetchButtonDisabled = true;\n\n    // Start a countdown and an interval before executing the fetch function\n    this.simpleFetchCountdown = countdown;\n    this.simpleFetchInterval = interval(1000);\n\n    // Start a countdown to showcase the shell elements animations for a few seconds before the data get's fetched into the shell object\n    const timer$ = timer(countdown * 1000);\n    // When timer emits after X seconds, complete source\n    this.simpleFetchInterval\n    .pipe(\n      takeUntil(timer$),\n      finalize(() => this.simpleFetchButtonDisabled = false)\n    )\n    .subscribe({\n      next: () => {\n        this.simpleFetchCountdown --;\n      },\n      complete: () => {\n        this.simpleFetchCountdown = 0;\n        // Once the countdown ends, fetch data using the HttpClient\n        // You can also define the type of the property using the IShell interface or the ShowcaseShellModel class\n        // this.http.get<IShell>('./assets/sample-data/showcase/shell.json');\n        // this.http.get<ShowcaseShellModel>('./assets/sample-data/showcase/shell.json');\n        this.http.get<{\n          cover: string,\n          image: string,\n          title: string,\n          description: string\n        }>('./assets/sample-data/showcase/shell.json')\n        .pipe(\n          take(1) // Force Observable to complete\n        ).subscribe(val => {\n          console.log('Fetching shell data using the HttpClient', val);\n          this.simpleFetchData = val;\n        });\n      }\n    });\n  }\n\n  showcaseShellProvider(): void {\n    // Prevent rage clicks on the 'Fetch more Data' button\n    this.shellProviderButtonDisabled = true;\n\n    const shellObject: {\n      cover: string,\n      image: string,\n      title: string,\n      description: string\n    } = {\n      cover: '',\n      image: '',\n      title: '',\n      description: ''\n    };\n\n    const shellProvider = new ShellProvider(\n      shellObject,\n      this.http.get<{\n        cover: string,\n        image: string,\n        title: string,\n        description: string\n      }>('./assets/sample-data/showcase/shell.json')\n      // You can also define the type of the property using the IShell interface or the ShowcaseShellModel class\n      // this.http.get<IShell>('./assets/sample-data/showcase/shell.json');\n      // this.http.get<ShowcaseShellModel>('./assets/sample-data/showcase/shell.json');\n    );\n\n    this.shellProviderData = shellProvider.observable.pipe(\n      take(2), // ShellProvider will emit a mock object and the real data fetched from the source. Emit those two values and then complete.\n      finalize(() => this.shellProviderButtonDisabled = false)\n    );\n  }\n}\n","import { Observable, BehaviorSubject, forkJoin, of } from 'rxjs';\nimport { first, delay } from 'rxjs/operators';\n\nimport { environment } from '../../environments/environment';\n\nexport class ShellProvider<T> {\n  private _observable: Observable<T>;\n\n  // A Subject that requires an initial value and emits its current value to new subscribers\n  // If we choose a BehaviorSubject, new subscribers will only get the latest value (real data).\n  // This is useful for repeated use of the resolved data (navigate to a page, go back, navigate to the same page again)\n  private _subject: BehaviorSubject<T>;\n\n  // We wait on purpose 2 secs on local environment when fetching from json to simulate the backend roundtrip.\n  // However, in production you should set this delay to 0 in the environment.ts file.\n  private networkDelay = (environment && environment.shell && environment.shell.networkDelay) ? environment.shell.networkDelay : 0;\n  // To debug shell styles, change configuration in the environment.ts file\n  private debugMode = (environment && environment.shell && environment.shell.debug) ? environment.shell.debug : false;\n\n  constructor(shellModel: T, dataObservable: Observable<T>) {\n    // tslint:disable-next-line:max-line-length\n    const shellClassName = (shellModel && shellModel.constructor && shellModel.constructor.name) ? shellModel.constructor.name : 'No Class Name';\n\n    // tslint:disable-next-line:no-console\n    console.time('[' + shellClassName + '] ShellProvider roundtrip');\n    // Set the shell model as the initial value\n    this._subject = new BehaviorSubject<T>(shellModel);\n\n    const delayObservable = of(true).pipe(\n      delay(this.networkDelay)\n      // finalize(() => console.log('delayObservable COMPLETED'))\n    );\n\n    dataObservable.pipe(\n      first() // Prevent the need to unsubscribe because .first() completes the observable\n      // finalize(() => console.log('dataObservable COMPLETED'))\n    );\n\n    // Put both delay and data Observables in a forkJoin so they execute in parallel so that\n    // the delay caused (on purpose) by the delayObservable doesn't get added to the time the dataObservable takes to complete\n    const forkedObservables = forkJoin(\n      delayObservable,\n      dataObservable\n    )\n    .pipe(\n      // finalize(() => console.log('forkedObservables COMPLETED'))\n    )\n    .subscribe(([delayValue, dataValue]: [boolean, T]) => {\n      if (!this.debugMode) {\n        this._subject.next(dataValue);\n        // tslint:disable-next-line:no-console\n        console.timeEnd('[' + shellClassName + '] ShellProvider roundtrip');\n      }\n    });\n\n    this._observable = this._subject.asObservable();\n  }\n\n  public get observable(): Observable<T> {\n    return this._observable;\n  }\n}\n"],"sourceRoot":""}